// Copyright (C) 2010 by Yan Huang <yhuang@virginia.edu>

package OT;

import java.math.BigInteger;
import java.util.Random;

/**
 * The BitMatrix class is used in the OT Extension protocol.
 * The matrix will be generated by the Receiver (Chooser) and
 * then sent to the Sender.
 *
 * @author yhuang
 * @author nhusted
 */
class BitMatrix {
    private int nRows;
    private int nCols;
    BigInteger[] data;   // column vectors of the matrix

    /**
     * Instantiate an empty BitMatrix or size rows X cols.
     *
     * @param rows Number of rows in the BitMatrix
     * @param cols Number of columns in the BitMatrix
     */
    public BitMatrix(int rows, int cols) {
        nRows = rows;
        nCols = cols;

        // Each index in the array represents a column
        // Each bit in the element data[column#] is a different
        // row.
        data = new BigInteger[nCols];
    }

    /**
     * Generate a BitMatrix of nCols by nRows where each
     * column is represented by a BigInteger and each row is represented
     * by a bit in the BigInteger thus each element in the data array
     * is of size nRows bits. Each BigInteger is chosen randomly.
     *
     * @param rnd A Pseudo-Random Function
     */
    public void initialize(Random rnd) {
        for (int i = 0; i < nCols; i++)
            data[i] = new BigInteger(nRows, rnd);
    }

    /**
     * Transpose the bit matrix object.
     *
     * @return A transposed BitMatrix
     */
    public BitMatrix transpose() {

        // Create a temporary BitMatrix
        BitMatrix t = new BitMatrix(nCols, nRows);

        // The matrix will have nRows columns with each
        // new row set to 0.
        for (int i = 0; i < nRows; i++)
            t.data[i] = BigInteger.ZERO;

        // Loop through each column of the old matrix
        for (int j = 0; j < nCols; j++)
            // Loop through each row of the old matrix
            for (int i = 0; i < nRows; i++)
                // If the position i,j bit == 1
                if (data[j].testBit(i))
                    // The new value of column i at position j set to 1
                    t.data[i] = t.data[i].setBit(j);

        return t;
    }
}